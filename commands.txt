
These are the script commands that ar available at the interactive
processing window. These are TCL commands, so basic understanding of
Tcl scripting is assumed.

* axes <name>

Return an ordered list of dimensions for the axes of the named
item. For example, a 640x480 grayscale image has the axes dimensions
"640 480". This uses the FITS definition of image axes, so
multi-spectral images put color information in another axis. So an RGB
color image would have axes dimensions "640 480 3".

* bayer_decompose <dst> <src>

Decompose a grayscale image captured by a bayer filtered sensor into
red, green and blue planes of a destination image. The destination
image has the same X-Y dimensions as the source image, but input some
of the pixel values are valid. For each plane where a pixel value is
not valid, mark that pixel blank by setting its alpha mask to zero.

One way to get a source image that has the properties that this
function expects is with the dcraw command, like so:

   dcraw -v -T -D -4 -o 0 -W -r 1.0 1.0 1.0 1.0 foo.NEF

This will produce a file "foo.tiff" that is a 16bit TIFF file. Load that
and use it as a source for the bayer_decompose function.

* bench names

Get a list of the bench tree items that have script names.

* bench display_text <name>

Get the display string for the named item.

* copy <work/dst> <src>

Copy the source data array to the named item in the work folder. The
source array can be any data array, the destination is of the form
<folder>/<name>, where <folder> is the script-name for a Work Folder
and the <name> is the name of a page within the folder.

* crop <dst> <axes-list> <src> <start-point>

Crop an array from the source. The destination can have fewer
dimensions then the source array, but must fit entirely within the
source array. Also, the <start-point> dimensions must match the
dimensions of the <src> image.

* scratch new <name> <display-name> <type> <axes-list>

Create a new scratch image with the script name <name>. Use
<display-name> as the name to display, and create an image with the
<axes-list> dimensions.

* minmax <src>

Scan an image to find the minimum and maximum pixel values. The result
is a list of 4 items: The minimum value, the address of the minimum,
the maximum value, and its address.

* phase_correlate <dest> <dst-axes> <src1> <point1> <src2> <point2>

Do a phase correlation of portions of <src1> and <src2> images, and
put the resulting image into <dest>.

The destination array will have the data type native double and the
dimensions given by the list <dst-axes>. For example:

     phase_correlate dst {3900 2613} ...

will create a 2D destination array.

The <src1> and <src2> images must have the same type, and at least as
many axes as the destination array. For example, if the destination
array is 2D, then the source image must have at least 2 axes. The
<point1> and <point2> lists give the starting corner where the data
will be pulled from the <src1> and <src2> arrays. The dimensions of
the image to be cropped will come from the size of the destination
array. For example:

     phase_correlate dst {3900 2613} src1 {0 0 1} src2 {0 0 1}

will use the second plane of 3D source arrays as input to the 2D phase
correlation.

This function will create the destination image, but will also output
the coordinates in the destination of the peak, which corresponds to
the relative shift of the two source images.

* pixbin <dst> <src> <bin-list>

Bin pixels from the source image into a reduced destination image. The
<bin-list> is a list of bin amounts in each dimension. This function
accounts for blank pixels by not adding them into the result. The
destination image is scaled by the number of input values per bin, so
that the destination pixels have the same range as the source pixels.

* table <name> create <column-info>...
* table <name> cols
* table <name> rows
* table <name> set <row> <col> <value>

These variants of the "table" command allow for manipulation of
tables. In all cases the first argument is the table to manipulate,
and the second argument is the table-specific command to perform. The
table name is of the form <work>/<name> where <work> is the
script-name for a work folder and <name> is the name of the table.

 - create <column-info>...

This subcommand creates a new table. The named table must not already
exist. Each argument is a <column-info> list that describes the
column. Each column-info item is a list: {<name> <type>}. The <name>
is an ASCII name for the column heading, and the type is the type for
values.

 - cols
 - rows

These subcommands return the number of columns/rows in an existing
table. If the table doesn't exist, they return zero.

 - set <row> <col> <value>

This sets the value in the table at <row> <col> in the able. The <col>
must exist. The <row> must either exist or be exactly 1 past the last
row. In the latter case, a new row is created to accomodate the new
value. This is how new rows are added to the table.
